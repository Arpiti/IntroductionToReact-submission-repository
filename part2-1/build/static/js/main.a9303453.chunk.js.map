{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","console","log","put","App","useState","notes","setNotes","newNote","setNewNote","errorMessage","setErrorMessage","useEffect","noteService","output","Footer","style","color","fontStyle","fontSize","Notification","message","map","i","find","n","changedNote","returnedNote","catch","error","setTimeout","filter","toggleImportanceOf","onSubmit","event","preventDefault","nn","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"sLAYeA,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBAEXC,EAAQF,EAAKG,UAAY,qBAAqB,iBACpD,OACI,8BACG,qBAAIC,UAAU,OAAd,UAAsBJ,EAAKK,QAA3B,IAAoC,wBAAQC,QAASL,EAAjB,SAAoCC,U,gBCN7EK,EAAU,iDAkBD,EAhBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc5B,EAXA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EANA,SAACG,EAAIF,GAGlB,OAFAG,QAAQC,IAAI,YAAaF,GACTP,IAAMU,IAAN,UAAaX,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC2G5BO,EAtHH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAKwBJ,mBAAS,IALjC,mBAKTK,EALS,KAKKC,EALL,KAOhBC,qBAAU,WACRX,QAAQC,IAAI,UACZW,IAEGlB,MAAK,SAAAmB,GACJb,QAAQC,IAAI,qBACZK,EAASO,QAEZ,IAEH,IAAMC,EAAS,WAOb,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACE,uBACA,qEAoDAC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKhC,UAAU,QAAf,SACGgC,KAKP,OACE,gCACE,uCACA,cAACD,EAAD,CAAcC,QAASX,IAMvB,6BAEIJ,EAAMgB,KAAI,SAACrC,EAAMsC,GAAP,OACR,cAAC,EAAD,CAEEtC,KAAMA,EACNC,iBAAkB,kBA1EH,SAAAc,GAEzB,IAAMf,EAAOqB,EAAMkB,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KACtCC,QAAQC,IAAI,UAAUjB,GACtB,IAAMyC,EAAW,2BAAQzC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDyB,EACUb,EAAI0B,GACX/B,MAAK,SAAAgC,GACJpB,EAASD,EAAMgB,KAAI,SAAArC,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO0C,SAEpDC,OAAM,SAAAC,GACLlB,EAAgB,SAAD,OAAU1B,EAAKK,QAAf,sCACfwC,YAAW,WAAQnB,EAAgB,QAAS,KAC5CJ,EAASD,EAAMyB,QAAO,SAAAN,GAAC,OAAIA,EAAEzB,KAAOA,SA4DNgC,CAAmB/C,EAAKe,MAF3CuB,QAKb,uBAAMU,SAzDM,SAACC,GAEfA,EAAMC,iBAEN,IAAIC,EAAK,CACP9C,QAASkB,EACT6B,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAI7B5B,EACUuB,GACPzC,MAAK,SAAAmB,GACJb,QAAQC,IAAI,cAAeY,GAC3BP,EAASD,EAAMoC,OAAO5B,IACtBL,EAAW,QAyCb,UACE,uBAAOkC,MAAOnC,EAASoC,SAtCN,SAACV,GACtBjC,QAAQC,IAAI,WAAYgC,EAAMW,QAC9B5C,QAAQC,IAAI,cAAegC,EAAMW,OAAOF,OACxClC,EAAWyB,EAAMW,OAAOF,OACxB1C,QAAQC,IAAI,OAAQM,MAmChB,wBAAQsC,KAAK,SAAb,qBAEF,cAAC/B,EAAD,Q,MClFNgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a9303453.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({note, toggleImportance}) => { \n\n    const label = note.important ? 'mark not important':'mark important';\n    return (\n        <div>\n           <li className='note'>{note.content} <button onClick={toggleImportance}>{label}</button></li> \n        </div>\n    )\n}\n\nexport default Note;","import axios from 'axios'\nconst baseUrl = 'https://note-app-arpit.herokuapp.com/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  console.log('id',typeof (id));\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note';\nimport noteService from './services/notes'\n\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n//  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('')\n\n  useEffect(() => {\n    console.log('effect');\n    noteService\n      .getAll()\n      .then(output => {\n        console.log('promise fulfilled');\n        setNotes(output);\n      })\n  }, []);\n\n  const Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app developed by Arpit Rai</em>\n      </div>\n    )\n  }\n\n  const toggleImportanceOf = id => {\n    \n    const note = notes.find(n => n.id === id)\n    console.log('note >>',note);\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(`Note '${note.content}' was already removed from server`);\n        setTimeout(() => { setErrorMessage(null) }, 3000);\n        setNotes(notes.filter(n => n.id !== id));\n      })\n  }\n\n  //  console.log('render', notes.length, 'notes');\n\n  const addNote = (event) => {\n\n    event.preventDefault();\n\n    let nn = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      // id: notes.length + 1,\n    }\n\n    noteService\n      .create(nn)\n      .then(output => {\n        console.log('RESPONSE >>', output);\n        setNotes(notes.concat(output));\n        setNewNote('');\n      })\n  }\n\n  const handleOnChange = (event) => {\n    console.log('onChange', event.target);\n    console.log('input value', event.target.value);\n    setNewNote(event.target.value);\n    console.log('newN', newNote);\n  }\n\n  const Notification = ({ message }) => {\n    if (message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      {/* <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div> */}\n      <ul>\n        {\n          notes.map((note, i) =>\n            <Note\n              key={i}\n              note={note}\n              toggleImportance={() => toggleImportanceOf(note.id)} />\n          )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleOnChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default App;\n\n\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css';\n\n// axios\n//   .get('http://localhost:3001/notes')\n//   .then(response => {\n//     console.log(response);\n//   });\n\n// const promise2 = axios.get('http://localhost:3001/foobar')\n// console.log(promise2)\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only JavaScript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n// axios.get('http://localhost:3001/notes').then(response => {\n//   const notes = response.data\n//   ReactDOM.render(\n//     <App notes={notes} />,\n//     document.getElementById('root')\n//   )\n// })"],"sourceRoot":""}